name: Release a new VTD app version

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build_and_upload:
    name: Build & Upload
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Get app version
        run: echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Build application
        run: npm run make

      # Windows
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: "out/make/squirrel.windows/x64/vtd-${{ env.APP_VERSION }} Setup.exe"
          asset_name: vtd-setup-${{ env.APP_VERSION }}.exe
          asset_content_type: application/octet-stream

      # Linux DEB
      - name: Find DEB file
        if: matrix.os == 'ubuntu-latest'
        run: echo "DEB_FILE=$(find out/make/deb/x64 -name '*.deb' -print -quit)" >> $GITHUB_ENV

      - name: Upload Release Asset (Linux DEB)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEB_FILE }}
          asset_name: vtd-linux-amd64-${{ env.APP_VERSION }}.deb
          asset_content_type: application/vnd.debian.binary-package

      # Linux RPM
      - name: Find RPM file
        if: matrix.os == 'ubuntu-latest'
        run: echo "RPM_FILE=$(find out/make/rpm/x64 -name '*.rpm' -print -quit)" >> $GITHUB_ENV

      - name: Upload Release Asset (Linux RPM)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.RPM_FILE }}
          asset_name: vtd-linux-x86_64-${{ env.APP_VERSION }}.rpm
          asset_content_type: application/x-rpm
